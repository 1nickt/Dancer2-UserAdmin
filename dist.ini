name             = Dancer2-UserAdmin
license          = Perl_5
author           = Nick Tonkin <tonkin@cpan.org>
copyright_holder = Nick Tonkin
copyright_year   = 2019

[Prereqs]
Dancer2           = 0.157
Moo               = 0

[Prereqs / TestRequires]
HTTP::Request::Common = 0
Plack::Test           = 0
Test::More            = 0
Test::Pod::Coverage   = 0

[RewriteVersion]         ; gets the new version number to use for the build
[PodWeaver]              ; builds Pod: see weaver.ini
[InsertCopyright]        ; adds copyright info from config
[License]                ; adds license info from config
[ReadmeFromPod]          ; creates README.md from the Pod
type = markdown
[Prereqs::AuthorDeps]    ; add authordeps under develop/requires in META files
[MinimumPerl]            ; add minimum required Perl version to prereqs
[MetaProvides::Package]  ; list modules provided by distro in META files
[GitHub::Meta]           ; add GitHub repo info to META files
[MetaYAML]               ; generate META.yml (v1.4)
[MetaJSON]               ; generate META.json (v2)
[CPANFile]               ; generate cpanfile
[GatherDir]              ; gather the files for the build
exclude_filename = dist.ini
exclude_filename = weaver.ini
[PruneCruft]             ; prune standard cruft
[PruneFiles]             ; prune our files
match = Dancer2-UserAdmin-
[MakeMaker]              ; build a Makefile.PL that uses ExtUtils::MakeMaker
[Manifest]               ; create a Manifest file

[CheckChangesHasContent] ; ensure CHANGES file has been updated
changelog = CHANGES
[Git::Check]             ; check that everything is committed except generated files
allow_dirty = dist.ini
allow_dirty = CHANGES
allow_dirty = cpanfile
allow_dirty = README.md
[TestRelease]            ; ensure t/ tests pass
[ConfirmRelease]         ; prompt before uploading
[UploadToCPAN]           ; uploads to CPAN
;[FakeRelease]            ; fake release (do nothing)

; after release
[Git::Commit / Commit_Dirty_Files]      ; commit generated/munged files (as released)
[Git::Tag]                              ; tag repo in Git with custom tag
tag_format = release-%v

; NextRelease acts *during* pre-release to write $VERSION and
; timestamp to Changes and  *after* release to add a new {{$NEXT}}
; section, so to act at the right time after release, it must actually
; come *after* Commit_Dirty_Files but *before* Commit_Changes in the
; dist.ini.  It will still act during pre-release as usual
[NextRelease]                           ; update CHANGES file
filename = CHANGES
[BumpVersionAfterRelease]               ; update source code with *next* Version number

[Git::Commit / Commit_Changes]          ; commit changes and version numbers ready for new work
changelog = CHANGES
allow_dirty_match = ^lib/
commit_msg = Update CHANGES and $VERSION
[Git::Push]                             ; push to Git
push_to = origin

; END